---
description: YASTwAI
globs: *.*
alwaysApply: true
---
1. Everything must be produced in english.
    - code
    - comments
    - documentation (README and other file headers)

2. Every command must not be interactive since we are dealing with a bot.
    - use proper arguments to prevent user interaction with commands.

3. Everytime the user sends a prompt, prepare an associated future git commit.
    - Check if we already are on a different branch than the "main" one. If not create a new branch.
    - Check if the prompt is still related to the current branch, if not create a new branch from the main one.
    - Use " | cat" to not stay stuck when checking status and branch names.
    - Use a consise summary as commit title
    - Use the full prompt made by the user as the commit description header as the "Prompt:" part.
    - Use the final summary as the rest of the commit description body as the "Description:" part.
    - Analyse all the faced difficulties and add a summary as the "Discussion:" part.
    - Use the ./scripts/create-commit.sh script to generate commits in the correct format.
    - Follow the detailed guidelines in CONTRIBUTING.md for reference.

4. Always finish by building the app and run unit tests in release mode.
    - Don't adress warnings in test files as long as they run properly.
    - #[allow(dead_code)] directive is forbidden to fix warnings except to silence warnings related to tests in production code.

5. When a test breaks, be careful.
    - You must check first if it's the modification the problem before adapting the test to the new change.

6. For PR creation, ONLY create PRs when EXPLICITLY requested by the user.
    - NEVER create a PR automatically or as part of another task unless directly requested.
    - Use the scripts/create-pr.sh script ONLY when the user has asked to "create a PR" or similar explicit instructions.
    - When a PR is explicitly requested, leverage AI capabilities for intelligent summarization:
        - Analyzing all commits on the branch to understand the complete change set
        - Creating a concise PR title that accurately reflects all changes
        - Generating a well-structured PR body with emoji-enhanced sections
    - For branches with multiple commits, structure the summary as follows:
        - üìå **Overview**: Brief summary of what the PR accomplishes (2-3 sentences)
        - üîç **Key Changes**: Bullet points of the most significant changes
        - üß© **Implementation Details**: Technical approach and design decisions
        - üîÑ **Migration Notes**: Any changes requiring updates to existing code
        - ‚ö†Ô∏è **Areas of Attention**: Parts of the PR that need special review focus
    - Format PR descriptions with emojis according to this convention:
        - üìù Commit Details: Historical record of all commits
        - üìÖ Date: For timestamps
        - ‚úÖ Commit titles: For each commit
        - üìÅ Files Changed: For listing modified files
    - When executing the create-pr.sh script (only when requested):
        - Always copy the full description to clipboard before opening the browser
        - Paste the complete clipboard content into GitHub's PR description field
        - Verify the PR has been created with the proper formatting and content
    - For large PRs, use appropriate markdown (headers, lists, code blocks) to enhance readability.

7. Commit Message Structure Reference:
    ```
    <Concise summary as title>

    Prompt: <Original prompt or request>

    Description: <Detailed description of changes>

    Discussion: <Challenges faced and how they were resolved>
    ```
