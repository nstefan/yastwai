---
description: project_rules
globs: *
alwaysApply: true
---

Everything must be produced in english.
    - code
    - comments
    - documentation (README and other file headers)

Every command must not be interactive.
    - use proper arguments to prevent user interaction with commands
        - Example: use "| cat" for a "git diff" operation.

Git Command Safety Guidelines
    - ALWAYS prevent git commands from opening interactive pagers that could block operations:
        - Pipe all potentially paginating git commands through cat:
          ```bash
          git log | cat
          git diff | cat
          git status | cat
          git show | cat
          ```
        - For git log specifically, use these safe alternatives:
          ```bash
          # Option 1: Pipe through cat
          git log | cat
          
          # Option 2: Use --no-pager flag
          git --no-pager log
          
          # Option 3: Limit output to avoid pager
          git log --oneline -n 5 | cat
          ```
        - For git commands that might open an editor (like commit), use the -m flag:
          ```bash
          git commit -m "Commit message" 
          ```
    - NEVER run raw git commands that could trigger interactive behavior without protection

IMPORTANT: Never edit .mdc files directly
    - All .mdc files in the project are symlinks to their corresponding source files.
    - Always edit the original source files (typically in docs/agentrules/) instead.
    - Modifying .mdc files directly will not persist changes and could break the symlink structure.

Model Detection Instructions for AI Agents
    - Use scripts/ai-cursor-model.sh to retrieve the current AI model information:
        ```bash
        MODEL=$(./scripts/ai-cursor-model.sh --quiet)
        ```
    - It is recommended to detect the model first, then pass it to the scripts asking for it:
        ```bash
        MODEL=$(./scripts/ai-cursor-model.sh --quiet)
        ```

README File Management
    - The README.md should be dynamically generated using the scripts/ai-readme.sh script.
    - NEVER edit the README.md file directly as it is automatically generated.
    - When asked to update the README, ALWAYS modify the README generation script (scripts/ai-readme.sh) instead.
    - Automatically regenerate the README.md file in the following situations:
        1. When Cargo.toml dependencies or project metadata changes
        2. When new features are added to the codebase
        3. When the docs directory content is modified
        4. When provider implementations are added or significantly modified
        5. After completing significant refactoring that affects functionality
    - Use the following command to update the README.md:
        ```bash
        ./scripts/ai-readme.sh
        ```
    - You can check if README needs an update with a dry run:
        ```bash
        ./scripts/ai-readme.sh --dry-run
        ```
    - Remember to commit the updated README.md file as part of your changes

Script Testing Requirements
    - ALWAYS create Rust unit tests for any new script added to the codebase.
    - Test files should follow the existing pattern in the project:
        1. Create a shell script test file in tests/scripts/ named test_ai_scriptname.sh
           - Include comprehensive test cases for all script options and edge cases
           - Follow the pattern of existing test scripts with setup, test cases, and cleanup
        
        2. Add a corresponding test function in tests/script_tests.rs:
           ```rust
           #[test]
           fn test_ai_scriptname_script() {
               let script = project_root().join("tests/scripts/test_ai_scriptname.sh");
               assert!(run_script(&script), "ai-scriptname.sh test failed");
           }
           ```
        
    - Script tests should verify:
        1. All command-line options work as expected
        2. Error conditions are properly handled
        3. The script functions correctly in various scenarios
        4. Edge cases are properly addressed
        
    - Use mock functions when testing potentially destructive Git operations
        - See existing test scripts for examples of mocking Git commands
        - Ensure tests can run without modifying the actual repository