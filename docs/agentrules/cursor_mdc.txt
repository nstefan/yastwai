---
description: project
globs: 
alwaysApply: false
---
# AI Agent Instructions for Project Yastwai

## ‚ö†Ô∏è CRITICAL SAFEGUARDS

### FILE STRUCTURE
- This file (docs/agentrules/cursor_mdc.txt) is the SOURCE OF TRUTH
- The file .cursor/rules/project.mdc is ONLY A SYMLINK pointing to this file
- ALWAYS edit THIS file, never edit the symlink directly

### MAIN BRANCH PROTECTION
- NEVER commit changes to the main branch under ANY circumstances
- If on main branch, ALWAYS create a new branch first: `git checkout -b new-branch-name`
- ALWAYS verify your current branch with `git branch` before committing

### PULL REQUEST CREATION
- NEVER create a PR automatically or proactively
- ONLY create PRs when the user EXPLICITLY requests it with words like "create PR", "make PR", or "PR"
- When in doubt, DO NOT create a PR - wait for explicit instructions

## GENERAL PRINCIPLES

### 1. CODE STANDARDS
- ALWAYS produce ALL content in English:
  - Code
  - Comments
  - Documentation
  - Logs and messages

### 2. COMMAND EXECUTION SAFETY
- NEVER use interactive commands
- ALWAYS pipe commands that might trigger pagers through `cat` (e.g., `git diff | cat`)
- ALWAYS redirect stderr to prevent interactive prompts (e.g., `command 2>/dev/null`)

## WORKFLOW PROCEDURES

### 3. STANDARD PROMPT WORKFLOW
When a user sends a prompt:

1. **Branch Management**:
   - ALWAYS check if you're on the main branch - if so, warn the user immediately
   - Assess if the prompt relates to the current branch - if not, create a new branch from main

2. **File Changes**:
   - ALWAYS automatically stage modified files at the end with `git add` for any files created or modified

3. **Commit Preview**:
   - ALWAYS generate a commit preview using the following format:
     ```
     {commit title}

     Short description: {short description}
     
     Model: {AI model name}

     Prompt: {original prompt}

     Thought Process: 
     {reasoning process}

     Discussion: 
     {challenges faced}
     ```
   - The Model section MUST contain the technical AI model name (e.g., "claude-3.7-sonnet-thinking")
   - ALWAYS copy your internal reasoning VERBATIM in the Thought Process section
   - Your thought process MUST explain your reasoning about the problem, approach, and solution - not just list files changed

4. **User Confirmation**:
   - ALWAYS ask the user if they want to proceed with the commit
   - NEVER execute the commit without explicit confirmation
   - After user confirmation, use:
     ```bash
     ./scripts/ai-commit.sh --model "model-name" "Title" "Description" "Prompt" "Thought Process" "Discussion"
     ```
   - After committing, ALWAYS wait for the user's next instructions

### 4. QUALITY ASSURANCE
When modifying source files:

1. **Testing**:
   - ALWAYS build and test after code changes:
     ```bash
     cargo build --release && cargo test --release
     ```
   - When tests fail, FIRST check if code changes caused the failure
   - ONLY modify tests if requirements have legitimately changed

2. **Code Standards**:
   - DO address warnings in production code
   - DO NOT address warnings in test files if they run properly
   - NEVER use `#[allow(dead_code)]` except for test-related code in production files

3. **Linting**:
   - For checking: `./scripts/ai-clippy.sh --check-only`
   - For fixing: `./scripts/ai-clippy.sh --fix`

### 5. PULL REQUEST CREATION
ONLY when explicitly requested:

1. **Using the Script**:
   - ALWAYS use the AI-PR script:
     ```bash
     ./scripts/ai-pr.sh --title "PR Title" --overview "Brief overview" --key-changes "Change 1,Change 2" --implementation "Detail 1,Detail 2"
     ```
   - ALWAYS use comma-separated lists, NOT multiline strings

2. **PR Structure**:
   - üß† **Instructions**:
     - Prompt and Thought Process (original text)
   - üìå **Overview**: Brief summary (2-3 sentences)
   - üîç **Key Changes**: Bullet points of significant changes
   - üß© **Implementation Details**: Technical approach
   - üîÑ **Migration Notes**: Update requirements for existing code
   - ‚ö†Ô∏è **Areas of Attention**: Parts needing special review
   - ü§ñ **AI Model**: Technical AI model name

3. **PR Formatting**:
   - üìù Commit Details: Historical record
   - üìÖ Date: For timestamps
   - üìé Commit titles: With commit hash
   - üìÅ Files Changed: Modified files list
   - Use appropriate markdown formatting for readability

### 6. MODEL DETECTION
For AI model information:

1. **Getting Model Info**:
   ```bash
   MODEL=$(./scripts/ai-cursor-model.sh --quiet)
   ```

2. **Using with Scripts**:
   - ALWAYS include model parameter for commits and PRs:
     ```bash
     ./scripts/ai-commit.sh --model "$MODEL" "Title" "Description" "Prompt" "Thought" "Discussion"
     ./scripts/ai-pr.sh --model "$MODEL" ...
     ```
