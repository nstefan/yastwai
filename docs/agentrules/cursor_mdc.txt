---
description: project
globs: 
alwaysApply: false
---
1. Everything must be produced in english.
    - code
    - comments
    - documentation (README and other file headers)

2. Every command must not be interactive.
    - use proper arguments to prevent user interaction with commands. Example "git diff | cat".

3. Everytime the user sends a prompt, ALWAYS automatically prepare and display a commit preview at the end when you're confident everything is ok:
    - Check if the prompt is still related to the current branch, if not create a new branch from the main branch.
    - Never commit on the main branch.
    - ALWAYS run ./scripts/ai-commit.sh with --mode=preview first and show the output to the user without asking.
    - THEN ask the user if they want to proceed with the commit.
    - Only execute the commit (--mode=execute) after explicit user confirmation.
    - Follow the detailed guidelines in CONTRIBUTING.md for reference.

    Commit Message Structure Reference:
    ```
    <Concise summary as title>

    Prompt: 
    <Original prompt or request>

    Chain of thoughts: 
    <Reasoning process used by the agent>

    Discussion: 
    <Challenges faced and how they were resolved>
    ```

4. Whenever a code source file have been modified, always finish by building the app and run unit tests in release mode.
    - Don't adress warnings in test files as long as they run properly.
    - #[allow(dead_code)] directive is forbidden to fix warnings except to silence warnings related to tests in production code.

5. When a test breaks, BE CAREFUL!
    - You must check first if it's the modification the problem before tryin to adapt the test to the new changes.

6. PR creation instructions, ONLY create PRs when EXPLICITLY requested by the user.
    - NEVER create a PR automatically or as part of another task unless directly requested.
    - ALWAYS use the scripts/ai-pr.sh script as the preferred method for PR creation.
    - The helper script avoids multiline command issues and creates well-structured PRs:
        ```bash
        ./scripts/ai-pr.sh --title "PR Title" --overview "Brief overview" --key-changes "Change 1,Change 2" --implementation "Detail 1,Detail 2"
        ```
    - Use this syntax with comma-separated lists instead of trying to create multiline strings directly.
    - Only fall back to direct git commands if the ai-pr.sh is not available.
    - When a PR is explicitly requested with words like "pr" or "create pr", leverage AI capabilities for intelligent summarization:
        - Analyzing all commits on the branch to understand the complete change set
        - Generating a well-structured PR body with emoji-enhanced sections
        - At the end, create a PR title that accurately reflects a summary of the changes
        - Keep prompt and chain of thoughts in memory
    - Structure the summary as follows for every branches:
        - üß† **Instructions**
          Prompt: 
            ```
            <Original prompt or request as plain text>
            ```
          Chain of thoughts: 
            ```
            <Reasoning process used by the agent as plain text>
            ```
        - üìå **Overview**: Brief summary of what the PR accomplishes (2-3 sentences)
        - üîç **Key Changes**: Bullet points of the most significant changes
        - üß© **Implementation Details**: Technical approach and design decisions
        - üîÑ **Migration Notes**: Any changes requiring updates to existing code
        - ‚ö†Ô∏è **Areas of Attention**: Parts of the PR that need special review focus
    - Format PR descriptions with emojis according to this convention:
        - üìù Commit Details: Historical record of all commits
        - üìÖ Date: For timestamps
        - üìé Commit titles: For each commit (with commit hash)
        - üìÅ Files Changed: For listing modified files
    - For large PRs, use appropriate markdown (headers, lists, code blocks and line breaks) to enhance readability.
